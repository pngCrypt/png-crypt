================================================================================================
png-crypt v0.3 beta
================================================================================================

Утилита для упаковки файлов в PNG изображение. Данные помещаются в младшие биты каналов цвета (RGBA) 
и абсолютно не заметны для глаза.

Имеется возможность шифровать данные с использованием пароля.

Имя исходного файла данных также сохраняется в изображении.

-----------------------------------------------------------------------------------------------
Формат вызова: 

png-crypt [<switches>] <in_image> <data_file> [<out_image>]

Где:
	<switches> - ключи запуска (если не заданы, используется режим кодирования - ключ -e )

	<in_image> - имя исходного файла изображения:
		для кодирования можно использовать форматы: png,gif,jpg,tif,bmp
		для декодирования: png

	<data_file> - имя файла данных:
		для кодирования: любой файл, размеры которого не превышают свободного количества байт на изображении
		для декодирования: имя файла, в которое будет записан результат декодирования (можно не задавать)

	<out_image> - имя выходного png-изображения (при кодировании)

Возможные ключи запуска:

	-e - закодировать файл <data_file> в изображение <in_image> (этот ключ можно не задавать)
		результатом будет png изображение с именем <out_image>
		если <out_image> не задано, будет использовано имя:  <in_image>.enc.png

	-d - раскодировать данные, закодированные в изображении <in_image>
		если указано <data_file>, то данные будут записаны в этот файл,
		если нет, то будет использовано оригинальное имя файла (извлекается из данных)

	-b:N - задать минимальное количество бит на канал (bpc) для хранения данных, N=1..8 (при кодировании)
		по умолчанию: 1

	-B:N - задать максимальное количество бит на канал (bpc) для хранения данных, N=1..8 (при кодировании)
		по умолчанию: 4

		Реальное значение bpc выбирается утилитой автоматически между минимальным и максимальным 
		в зависимости от размера исходных данных.
		Чем больше значение bpc, тем больше данных можно сохранить, но тем заметнее становится наличие данных
		Если задан только минимальный bpc (-b), то принудительно используется заданное значение
		Если задан только максимальный bpc (-B), то значение bpc выбирается в пределах от 1 до заданного

	-a:N - принудительное использование альфа-канала для хранения данных N=(0,1,d) (при кодировании)
		-a:0 - не использовать альфа-канал
		-a:1 - использовать альфа канал (добавить его, если нет)
		-a:d - не использовать и удалить

		Использование альфа-канала увеличивает вместимость изображения для данных.
		По умолчанию (если ключ -a не задан) альфа канал используется только если он есть на исходном изображении

	-n[:N] - добавить шум на изображение (случайные данные) перед кодированием.
		-n:N - добавить шум заданной плотности (N=0..100) в процентах. 0 - не добвалять шум
		-n - добавить шум случайной плотности (5..50 %)

		Шум сохраняется так же как и данные (в младших битах) и призван затруднить распознавание данных

	-p:PASSWORD - задать пароль для шифрования (расшифровки) данных (при кодировании/декодировании)
		При использовании пароля при кодировании автоматически добавляется случайный шум (отключить его можно ключом -n:0 )
		Пароль регистрозависимый

	-y - Принудительно перезаписывать существующие выходные файлы
		В противном случае (без этого ключа) будет выдаваться запрос на перезапись

	-k - Отключить паузу по завершении программы
		В противном случае случае по завершении выдается запрос "нажмите любую клавишу"

	-# - debug mode (режим отладки): выводит некоторую дополнительную информацию
		В частности подсвечивает (делает видимыми) закодированные данные (данные - зеленые, шум - красный, пересечения - желтые)

-----------------------------------------------------------------------------------------------
Для просмотра информации об исходном изображении возможен запуск в формате:

png-crypt <in_image>

-----------------------------------------------------------------------------------------------
Примеры:

png-crypt yoba.jpg puskin.txt
	упаковывает файл pushkin.txt в изображение yoba.jpg, на выходе: yoba.enc.png

png-crypt -b:4 yarovaya.png yoba.jpg
	запаковать файл yoba.jpg в изображение yarovaya.png, использовать 4 бита на канал

png-crypt -B:2 -a:1 gosdura.gif nado_poterpet.mp3
	упаковать файл nado_poterpet.mp3 в изображение gosdura.gif, использовать не больше 2 бита на канал,	использовать альфа-канал

png-crypt -p:derjimsya iphone.tif derjites-zdes.webm
	упаковать файл derjites-zdes.webm в изображение iphone.tif, зашифровать паролем "derjimsya"

png-crypt -d gosdura.enc.png
	распаковать данные из изображения gosdura.enc.png (данные будут сохранены под оригинальым именем файла)

png-crypt -d yoba.enc.png out.txt
	распаковать данные из изображения yoba.enc.png и сохранить их в файле out.txt

png-crypt -d -p:derjimsya iphone.enc.png
	распаковать и расшифровать данные, используя пароль "derjimsya", сохранить под оригинальным именем

-----------------------------------------------------------------------------------------------
Примечания:

	Наличие упакованных данных в изображении утилита не проверяет.
	Она лишь проверяет правильность некоторых параметров (размер данных, шаг, имя файла), 
	и если они в пределах нормы, то декодирует данные. 
	Т.е. она может ошибочно "декодировать" данные с изображения, на котором их нет - в результате будет мусор.


	Для шифрования, в качестве примера, использовался модифицированный алгоритм Виженера.
	При желании можно прикрутить любой другой потоковый алгоритм.
	Для простоты подключения был создан промежуточный класс crypt (crypt.cpp), в котором необходимо реализовать 3 метода:

		1) Конструктор - в него передается пароль, производится инициализация движка

		2) encodeBuf - метод реализации кодирования (передается указатель на буфер данных и длина буфера)
			результирующие данные должны помещаться в тот же буфер, замещая исходные

		3) decodeBuf - метод реализации декодирования (передается указатель на буфер данных и длина буфера)
			результирующие данные должны помещаться в тот же буфер, замещая исходные

	Движок шифрования должен уметь работать с потоковыми данными 
	(т.е. исходные данные передаются частями, но должны обрабатывать как единый поток)
	